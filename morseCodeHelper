const morseCodeMap = new Map([['A', '.-'],
        ['B', '-...'],
        ['C', '-.-.'],
        ['D', '-..'],
        ['E', '.'],
        ['F', '..-.'],
        ['G', '--.'],
        ['H', '....'],
        ['I', '..'],
        ['J', '.---'],
        ['K', '-.-'],
        ['L', '.-..'],
        ['M', '--'],
        ['N', '-.'],
        ['O', '---'],
        ['P', '.--.'],
        ['Q', '--.-'],
        ['R', '.-.'],
        ['S', '...'],
        ['T', '-'],
        ['U', '..-'],
        ['V', '...-'],
        ['W', '.--'],
        ['X', '-..-'],
        ['Y', '-.--'],
        ['Z', '--..'],
        ['1', '.----'],
        ['2', '..---'],
        ['3', '...--'],
        ['4', '....-'],
        ['5', '.....'],
        ['6', '-....'],
        ['7', '--...'],
        ['8', '---..'],
        ['9', '----.'],
        ['0', '-----'] ]);

function fromTextToMorseCode(text) {
    let translated = "";
    let words = text.split("   ");
    for (let i = 0; i < words.length; i++) {
        
        for (let j = 0; j < words[i].length; j++) {
            let morseCode =  morseCodeMap.get(words[i]);
            if (morseCode == null || morseCode == undefined) {
                return "not valid morse code";
            }
            translated += morseCode;
        }
        translated += " ";
    }
    return translated;
}

function fromMorseCodeToText(morseCode) {
    let translated = "";
    let words = morseCode.split("   ");
    for (let i = 0; i < words.length; i++) {
        let letters= words[i].split(" ");
        for (let j = 0; j < letters.length; j++) {
            let lookup = getByValue(morseCodeMap, letters[i]);
            if (lookup == null || lookup == undefined) {
                return "not valid morse code";
            }
            translated += morseCode;
        }
        translated += " ";
    }
    return translated;
}

function getByValue(map, searchValue) {
    for (let [key, value] of map.entries()) {
      if (value === searchValue)
        return key;
    }
  }
  
  